{"version":3,"file":"component---src-pages-pomodoro-tsx-df34c8559e2a77bf0167.js","mappings":"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","sources":["webpack://gatsby-site/./src/components/button.tsx","webpack://gatsby-site/./src/components/progress.tsx","webpack://gatsby-site/./src/components/timer.tsx","webpack://gatsby-site/./src/pages/pomodoro.tsx"],"sourcesContent":["import * as React from \"react\"\n\ninterface Props {\n    onClick: React.MouseEventHandler<HTMLInputElement>;\n    value: string;\n    highlight?: boolean;\n}\n\nconst Button: React.FC<Props> = (props) => {\n  let bgstring;\n  if (props.highlight){\n    bgstring = \" bg-cyan-950 hover:bg-cyan-900 focus:ring-cyan-700\"\n  } else {\n    bgstring = \" bg-rose-950 hover:bg-rose-900 focus:ring-rose-700\"\n  }\n  const valueString = props.value + (props.highlight ? \" *\" : '')\n\n  return (\n      <input className={bgstring + \" border border-l-0 border-solid py-1.5 px-3  text-rose-50 font-semibold rounded-e-xl shadow-md  focus:outline-none focus:ring  focus:ring-opacity-75\"} type=\"button\" onClick={props.onClick} value={valueString} />\n  )\n}\n\nexport default Button\n","import * as React from \"react\"\n\ninterface Props {\n    radius: number;\n    stroke: number;\n    tickStroke: number;\n    remaining: number;\n    length: number;\n}\n\nconst ProgressRing: React.FC<Props> = (props) => {\n    const { radius, stroke, tickStroke, remaining, length } = props;\n\n    const formatMinutesSeconds = React.useCallback((ms: number) => {\n        const mins = Math.floor(ms/(1000*60))\n        const seconds = Math.floor(ms/1000)%60\n        let minsStr = mins.toString()\n        if (minsStr.length < 2){\n          minsStr = ['0',minsStr].join('');\n        }\n        let secondsStr = seconds.toString()\n        if (secondsStr.length < 2){\n          secondsStr = ['0',secondsStr].join('');\n        }\n        return [minsStr, secondsStr].join(':')\n      }, []);\n\n    const progress = 100.0 * remaining/length;\n    const normalizedRadius = radius - stroke;\n    const circumference = normalizedRadius * 2 * Math.PI;\n    const progressLength = progress / 100 * circumference;\n    const remainingLength = circumference - (progress / 100 * circumference);\n\n    const innerRadius = normalizedRadius - stroke * 0.5;\n    \n    const innerCircumference = (innerRadius) * 2 * Math.PI;\n    const tickMarks = length / (1000*60);\n    const tickLengthUnit = innerCircumference / tickMarks;\n\n    return (\n        <svg className=\"stroke-cyan-950\"\n        height={radius * 2}\n        width={radius * 2}\n       >\n        <circle\n        className=\"stroke-cyan-400\"\n          fill=\"transparent\"\n          strokeWidth={ tickStroke }\n          stroke-width={ tickStroke }\n          strokeDasharray={ tickStroke + ' ' + (tickLengthUnit - tickStroke) }\n          strokeDashoffset={ innerCircumference*0.25 }\n          r={ innerRadius }\n          cx={ radius }\n          cy={ radius }\n         />\n        <circle\n        className=\"stroke-cyan-100\"\n          fill=\"transparent\"\n          strokeWidth={ stroke }\n          stroke-width={ stroke }\n          r={ normalizedRadius }\n          cx={ radius }\n          cy={ radius }\n         />\n        <circle\n          fill=\"transparent\"\n          strokeWidth={ stroke }\n          strokeDasharray={ progressLength + ' ' + remainingLength }\n          strokeDashoffset={ circumference*0.25 }\n          stroke-width={ stroke }\n          r={ normalizedRadius }\n          cx={ radius }\n          cy={ radius }\n         />\n         <text className=\"text-4xl font-bold\" x=\"50%\" y=\"50%\" textAnchor=\"middle\" dominantBaseline=\"middle\">{formatMinutesSeconds(remaining)}</text>\n      </svg>\n    );\n}\n\nexport default ProgressRing;\n","import * as React from \"react\"\nimport ProgressRing from \"../components/progress\";\n\ninterface Props {\n  start: number;\n  end: number;\n  onFinished: () => void;\n  notifyMessage: string;\n}\n\nconst Timer: React.FC<Props> = (props) => {\n  const {start, end, onFinished, notifyMessage} = props;\n\n  const [intervalState, setIntervalState] = React.useState<NodeJS.Timeout>();\n  const [remaining, setRemaining] = React.useState(end-start);\n\n  React.useEffect(() => {\n    setRemaining(end-start)\n\n    const interval = setInterval(() => {\n      tick()\n    }, 250);\n\n    setIntervalState(interval);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [start, end])\n\n  const tick = React.useCallback(() => {\n      const remainingTime = end - Date.now();\n      setRemaining(remainingTime)\n      if (remainingTime <= 0){\n        notify();\n        clearInterval(intervalState);\n        onFinished();\n      }\n  }, [end, remaining])\n\n  const notify = React.useCallback(() => {\n    var notification = new Notification(notifyMessage, {\n      icon: \"/static/hourglassIcon.jpg\",\n      body: notifyMessage\n    });\n    console.log(notification.title);\n    notification.onclick = function() {\n      parent.focus();\n      window.focus(); //just in case, older browsers\n      this.close();\n    };\n  }, [notifyMessage]);\n\n  React.useEffect(() => {\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission();\n    }\n  }, [])\n\n  return (<div className=\"flex flex-row justify-center\">\n          <ProgressRing stroke={40} tickStroke={5} radius={130} remaining={remaining} length={end-start} />\n        </div>);\n}\n\nexport default Timer\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport Button from \"../components/button\";\nimport Timer from \"../components/timer\";\n\nconst PomodoroPage: React.FC<PageProps> = () => {\n  const [onLength, setOnLength] = React.useState(20);\n  const [shortLength, setShortLength] = React.useState(5);\n  const [longLength, setLongLength] = React.useState(40);\n  const [timerType, setTimerType] = React.useState('');\n  const [start, setStart] = React.useState<Date>(new Date());\n  const [end, setEnd] = React.useState<Date>(new Date());\n\n  const startOn = React.useCallback(() => {\n    const endDate = new Date();\n    endDate.setMinutes(endDate.getMinutes() + onLength)\n    setStart(new Date());\n    setEnd(endDate);\n    setTimerType('Focus');\n  }, [onLength]);\n\n  const startShort = React.useCallback(() => {\n    const endDate = new Date();\n    endDate.setMinutes(endDate.getMinutes() + shortLength)\n    setStart(new Date());\n    setEnd(endDate);\n    setTimerType('Short Break');\n  }, [shortLength]);\n\n  const startLong = React.useCallback(() => {\n    const endDate = new Date();\n    endDate.setMinutes(endDate.getMinutes() + longLength)\n    setStart(new Date());\n    setEnd(endDate);\n    setTimerType('Long Break');\n  }, [longLength]);\n\n  React.useEffect(() => {\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission();\n    }\n  }, [])\n\n  return (\n    <main className=\"container max-w-2xl m-auto bg-stone-50 my-12 p-8 text-rose-950\">\n      <div className=\"border-l-4 border-rose-950\">\n        <div className=\"flex flex-row justify-between\">\n          <h1 className=\"ml-2 text-5xl font-bold\">\n            Timers\n          </h1>\n        </div>\n        <hr className=\"strok-rose-950\" />\n        {/* <br /> */}\n        <p className=\"ml-2\">\n          Use this timer to manage time by the pomodoro system. Set the lengths of each pomodoro segment and then hit the buttons below to start a timer. A browser notification will be sent when the timer ends.\n        </p>\n        <div className=\"grid grid-cols-[90px_90px_90px] justify-items-center\">\n          <span>Focus</span>\n          <span>Short</span>\n          <span>Long Break</span>\n          <input className=\"w-10 bg-stone-100\" type=\"number\" step={1} value={onLength} onChange={e => setOnLength(parseInt(e.target.value))} />\n          <input className=\"w-10 bg-stone-100\" type=\"number\" step={1} value={shortLength} onChange={e => setShortLength(parseInt(e.target.value))} />\n          <input className=\"w-10 bg-stone-100\" type=\"number\" step={1} value={longLength} onChange={e => setLongLength(parseInt(e.target.value))} />\n        </div>\n        <hr />\n        <br />\n        <div className=\"w-64 grid grid-cols-1\">\n          <Button onClick={() => startOn()} highlight={timerType == \"Focus\"} value=\"Focus\" />\n          <Button onClick={() => startShort()} highlight={timerType == \"Short Break\"} value=\"Short Break\" />\n          <Button onClick={() => startLong()} highlight={timerType == \"Long Break\"} value=\"Long Break\" />\n        </div>\n        <hr />\n        <br />\n        {timerType && (<>\n          <br />\n          <Timer start={start.valueOf()} end={end.valueOf()} onFinished={() => setTimerType('')} notifyMessage={timerType} />\n        </>)}\n      </div>\n    </main>\n  )\n}\n\nexport default PomodoroPage\n\nexport const Head: HeadFC = () => <title>Pomodoro Timers</title>\n"],"names":["props","bgstring","highlight","valueString","value","React","className","type","onClick","radius","stroke","tickStroke","remaining","length","formatMinutesSeconds","ms","mins","Math","floor","seconds","minsStr","toString","join","secondsStr","progress","normalizedRadius","circumference","PI","progressLength","remainingLength","innerRadius","innerCircumference","tickLengthUnit","height","width","fill","strokeWidth","strokeDasharray","strokeDashoffset","r","cx","cy","x","y","textAnchor","dominantBaseline","start","end","onFinished","notifyMessage","intervalState","setIntervalState","setRemaining","interval","setInterval","tick","clearInterval","remainingTime","Date","now","notify","notification","Notification","icon","body","console","log","title","onclick","parent","focus","window","this","close","permission","requestPermission","ProgressRing","onLength","setOnLength","shortLength","setShortLength","longLength","setLongLength","timerType","setTimerType","setStart","setEnd","startOn","endDate","setMinutes","getMinutes","startShort","startLong","step","onChange","e","parseInt","target","Button","Timer","valueOf","Head"],"sourceRoot":""}